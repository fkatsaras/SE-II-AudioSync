openapi: 3.0.0

info:
  version: "1.0.0"
  title: AudioSync-api
  description: The API for a music streaming app
  
paths:
  /login: #Users sould login in the platform with thir account
    post:
      summary: "User login"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                username:
                  type: "string"
                password:
                  type: "string"
      responses:
        '200':
          description: "User successfully logged in"
        '401':
          description: "Incorrect username or password"
  
  /register:  #Users should create an account and get in the platform
    post:
      summary: "User registration"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        '201':
          description: "User successfully registered"
        '409':
          description: "User account already exists"

  /users/{userId}:  #users should be able to see another users details/ update THEIR details/ delete THEIR account
    get:
      summary: "Get details of a user"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        '200':
          description: "Detailed information about a user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '404':
          description: "User not found"
    put:
      summary: "Update user details"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "integer"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        '200':
          description: "User details successfully updated"
        '403':
          description: "Forbidden - User not the owner of the account"
    delete:
      summary: "Delete a specific user"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        '204':
          description: "User successfully deleted"
        '404':
          description: "User not found"
        '403':
          description: "Forbidden - User not the owner of the account"
  
  /users/{userId}/liked-songs:  #Users should b able to see their liked songs/ like/ unlike a song
    get:
      summary: "Get liked songs of a user"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        '200':
          description: "Users liked songs"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Song"
    post:
      summary: "Like a song"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "integer"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Song"
      responses:
        '201':
          description: "Song liked!"
          
    delete:
      summary: "Unlike a song"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "integer"
        - name: "songId"
          in: "query"
          required: true
          schema:
            type: "integer"
      responses:
        '204':
          description: "Song unliked"
  
  /users/{userId}/liked-playlists: #Users should be able to see their liked playlist /like/ unlike a playlist
    get:
      summary: "Get liked playlists of a user"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        '200':
          description: "Users liked playlists"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Playlist"

    post:
      summary: "Like a playlist"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "integer"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Playlist"
      responses:
        '201':
          description: "Playlist liked!"

    delete:
      summary: "Unlike a playlist"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "integer"
        - name: "playlistId"
          in: "query"
          required: true
          schema:
            type: "integer"
      responses:
        '204':
          description: "Playlist unliked"
  
  /users/{userId}/preferences: #Users should be able to see/ update their account preferences
    get:
      summary: "Get user preferences"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        '200':
          description: "User's preferences"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPreferences"

    put:
      summary: "Update user preferences"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "integer"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPreferences"
      responses:
        '200':
          description: "User preferences updated"

  /playlists/new: #Users should be able to create a playlist
    post:
      summary: "Create a new playlist"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Playlist"
      responses:
        '201':
          description: "Playlist successfully created"
  
  /playlists/{playlistId}/songs: #Users should be able to se songs in a playlist/ Add/remove songs from THEIR playlist
    get:
      summary: "Get songs in a playlist"
      parameters:
        - name: "playlistId"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        '200':
          description: "Songs in the playlist"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Song"
        '404':
          description: "Song not in playlist"

    post:
      summary: "Add a song to a playlist"
      parameters:
        - name: "playlistId"
          in: "path"
          required: true
          schema:
            type: "integer"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Song"
      responses:
        '201':
          description: "Song added to the playlist"
        '403':
          description: "Forbidden - User not the owner of the playlist"

    delete:
      summary: "Remove a song from a playlist"
      parameters:
        - name: "playlistId"
          in: "path"
          required: true
          schema:
            type: "integer"
        - name: "songId"
          in: "query"
          required: true
          schema:
            type: "integer"
      responses:
        '204':
          description: "Song removed from the playlist"
        '400':
          description: "Invalid name"
        '404':
          description: "Song not on playlist"
        '403':
          description: "Forbidden - User not the owner of the playlist"

  /playlists/{playlistId}: #Users should be able to see the details of a playlist/ Update/delete THEIR playlists details
    get:
      summary: "Get details of a playlist"
      parameters:
        - name: "playlistId"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        '200':
          description: "Detailed information about a playlist"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Playlist"
        '404':
          description: "Playlist not found"
  
    put:
      summary: "Update playlist details"
      parameters:
        - name: "playlistId"
          in: "path"
          required: true
          schema:
            type: "integer"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlaylistUpdate"
      responses:
        '200':
          description: "Playlist successfully updated"
        '403':
          description: "Forbidden - User not the owner of the playlist"
        '404':
          description: "Playlist not found"
  
    delete:
      summary: "Delete a playlist"
      parameters:
        - name: "playlistId"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        '204':
          description: "Playlist successfully deleted"
        '403':
          description: "Forbidden - User not the owner of the playlist"
        '404': 
          description: "Playlist not found"
  
  /songs/{songId}: #Users should be able to see the details of a specific song
    get:
      summary: "Get details of a song"
      parameters:
        - name: "songId"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        '200':
          description: "Detailed information about a song"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Song"
        '404':
          description: "Song not in the platform"
  
  /search: #Users should be able to search songs, artists, playlists
    get:
      summary: "Search for songs, artists, and playlists"
      parameters:
        - name: "query"
          in: "query"
          required: true
          schema:
            type: "string"
        - name: "type"
          in: "query"
          required: false
          schema:
            type: "string"
            enum: ["songs", "artists", "playlists"]
      responses:
        '200':
          description: "List of items matching the query"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Song"
                  - $ref: "#/components/schemas/Artist"
                  - $ref: "#/components/schemas/Playlist"
        '404':
          description: "No items found for the query"
  
  /artists/{artistId}/songs: #Users should be able to see a specific artists songs
    get:
      summary: "Get songs by a specific artist"
      parameters:
        - name: "artistId"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        '200':
          description: "List of songs by the specified artist"
        '404':
          description: "Artist or songs not found"
  
  /songs/genres/{genre}: #Users should be able to browse songs by genre
    get:
      summary: "Get songs by genre"
      parameters:
        - name: "genre"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        '200':
          description: "List of songs in the specified genre"
        '404':
          description: "No songs found for the specified genre"
  
  /artists/{artistId}: #Users should see the details of an artist | #Artists should be able to update their details
    get:
      summary: "Get details of an artist"
      parameters:
        - name: "artistId"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        '200':
          description: "Details about the artist"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Artist"
        '404':
          description: "Artist not found"
          
    put:
      summary: "Update artist details"
      parameters:
        - name: "artistId"
          in: "path"
          required: true
          schema:
            type: "integer"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ArtistUpdate"
      responses:
        '200':
          description: "Artist details successfully updated"
        '403':
          description: "Forbidden - User not the owner of the artist profile"
        '404':
          description: "Artist not found"
  
  /artists: #Users should be able to see the artists on the platform/ Register as an artist
    get:
      summary: "Get a list of the artists on the platform"
      responses:
        '200':
          description: "A list of artists"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Artist"
    post:
      summary: "Create a new artist"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Artist" 
      responses:
        '201':
          description: "Artist created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Artist"
        '400':
          description: "Bad request, invalid input"
  
  /artists/{artistId}/albums: #Users should be able to see a specific artists albums(playlists)
    get:
      summary: "Get albums of a specific artist"
      parameters:
        - name: "artistId"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        '200':
          description: "Albums of the specified artist"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Playlist"  
        '404':
          description: "Artist not found or no albums available"
  
  /artist/{artistId}/following: #Users should be able to follow/ unfollow an artist
    post:
      summary: "Follow an artist"
      parameters:
        - name: "artistId"
          in: "path"
          required: true
          schema:
            type: "integer"
        - name: "userId"
          in: "query"
          required: true
          schema:
            type: "integer"
      responses:
        '200':
          description: "User started following the artist"
        '400':
          description: "Bad request"
        '404':
          description: "Artist not found"
  
    delete:
      summary: "Unfollow an artist"
      parameters:
        - name: "artistId"
          in: "path"
          required: true
          schema:
            type: "integer"
        - name: "userId"
          in: "query"
          required: true
          schema:
            type: "integer"
      responses:
        '204':
          description: "User unfollowed the artist"
        '400':
          description: "Bad request"
        '404':
          description: "Artist not found"
          
  /artists/{artistId}/songs/upload: #Artists should be able to upload a song
    post:
      summary: "Upload a song as an artist"
      parameters:
        - name: "artistId"
          in: "path"
          required: true
          schema:
            type: "integer"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Song"
      responses:
        '201':
          description: "Song successfully uploaded"
        '400':
          description: "Bad request"
          
  /artists/{artistId}/albums/upload: #Artists should be ble to upload an album
    post:
      summary: "Create and upload an album (playlist) as an artist"
      parameters:
        - name: "artistId"
          in: "path"
          required: true
          schema:
            type: "integer"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Playlist"
      responses:
        '201':
          description: "Album (playlist) successfully created and uploaded by the artist"
        '400':
          description: "Bad request"

components:
  schemas:
    User:
      type: "object"
      properties:
        id:
          type: "integer"
        username:
          type: "string"
        email:
          type: "string"
    
    UserUpdate:
      type: "object"
      properties:
        username:
          type: "string"
        email:
          type: "string"
          

    Playlist:
      type: "object"
      properties:
        id:
          type: "integer"
        title:
          type: "string"
        description:
          type: "string"

    PlaylistUpdate:
      type: "object"
      properties:
        title:
          type: "string"
        description:
          type: "string"
  
    UserPreferences:
      type: "object"
      properties:
        preferredGenres:
          type: "array"
          items:
            type: "string"
        preferredArtists:
          type: "array"
          items:
            type: "string"
        settings:
          type: "object"
          properties:
            theme:
              type: "string"
              enum:
                - "light"
                - "dark"
            notifications:
              type: "boolean"
        likedPlaylists:
          type: "array"
          items:
            type: "integer"
  
    Song:
      type: "object"
      properties:
        id:
          type: "integer"
        title:
          type: "string"
        artist:
          type: "string"
        duration:
          type: "string"
        genre:
          type: "string"
        source:
          type: "string"
          
    Artist:
      type: "object"
      properties:
        id:
          type: "integer"
        name:
          type: "string"
        genre:
          type: "string"
        albums:
          type: "array"
          items:
            $ref: "#/components/schemas/Playlist" 
        bio:
          type: "string"  # Bio information about the artist
        socialMedia:
          type: "object"
          properties:
            twitter:
              type: "string"
            facebook:
              type: "string"
            instagram:
              type: "string"
            website:
              type: "string"
        followers:
         type: "array"
         items:
           type: "integer" #user ids 
        songs:
          type: "array"
          items:
            $ref: "#/components/schemas/Song"
    ArtistUpdate:
      type: "object"
      properties:
        name:
          type: "string"
        genre:
          type: "string"
        bio:
          type: "string"
        socialMedia:
          type: "object"
          properties:
            twitter:
              type: "string"
            facebook:
              type: "string"
            instagram:
              type: "string"
            website:
              type: "string"
