openapi: "3.0.0"
info:
  version: "1.0.0"
  title: "Library API"
  description: "API for managing a library"

paths:
  /books:
    get:
      summary: "Get a list of books"
      responses:
        200:
          description: "A list of books"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Book"
    post:
      summary: "Add a new book"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
      responses:
        201:
          description: "Book successfully added"
  
  /books/{bookId}:
    get:
      summary: "Get details of a book"
      parameters:
        - name: "bookId"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        200:
          description: "Detailed information about a book"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
    delete:
      summary: "Delete a book"
      parameters:
        - name: "bookId"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        204:
          description: "Book successfully deleted"
  
  /users:
    get:
      summary: "Get a list of users"
      responses:
        200:
          description: "A list of users"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
    post:
      summary: "Create a new user"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        201:
          description: "User successfully created"
  
  /users/{userId}:
    get:
      summary: "Get details of a user"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        200:
          description: "Detailed information about a user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    put:
      summary: "Update user details"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "integer"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        200:
          description: "User successfully updated"
    delete:
      summary: "Delete a user"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        204:
          description: "User successfully deleted"

  /users/{userId}/borrowings:
    get:
      summary: "Get a list of borrowed books by a user"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        200:
          description: "A list of borrowed books"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Borrowing"
  
  /books/{bookId}/borrow:
    post:
      summary: "Borrow a book"
      parameters:
        - name: "bookId"
          in: "path"
          required: true
          schema:
            type: "integer"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BorrowRequest"
      responses:
        200:
          description: "Book successfully borrowed"
        400:
          description: "Bad request, book not available or user invalid"

  /books/{bookId}/return:
    post:
      summary: "Return a borrowed book"
      parameters:
        - name: "bookId"
          in: "path"
          required: true
          schema:
            type: "integer"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReturnRequest"
      responses:
        200:
          description: "Book successfully returned"
        400:
          description: "Bad request, return not possible"

components:
  schemas:
    Book:
      type: "object"
      properties:
        id:
          type: "integer"
        title:
          type: "string"
        author:
          type: "string"
        isbn:
          type: "string"
        available:
          type: "boolean"

    User:
      type: "object"
      properties:
        id:
          type: "integer"
        name:
          type: "string"
        email:
          type: "string"
    
    UserUpdate:
      type: "object"
      properties:
        name:
          type: "string"
        email:
          type: "string"

    Borrowing:
      type: "object"
      properties:
        userId:
          type: "integer"
        bookId:
          type: "integer"
        borrowDate:
          type: "string"
          format: "date-time"
        dueDate:
          type: "string"
          format: "date-time"
    
    BorrowRequest:
      type: "object"
      properties:
        userId:
          type: "integer"
    
    ReturnRequest:
      type: "object"
      properties:
        userId:
          type: "integer"
