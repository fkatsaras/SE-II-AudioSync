openapi: 3.0.0

info:
  version: "1.0.0"
  title: Music-streaming-api
  description: The API for a music streaming app
  
paths:
  /users:  #Put users on the platform
    post:
      summary: "Create a new user"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        '201':
          description: "User successfully created"
        '409':
          description: "User already exists!"
          
  /login:
    post:
      summary: "User login"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                username:
                  type: "string"
                password:
                  type: "string"
      responses:
        '200':
          description: "User successfully logged in"
        '401':
          description: "Wrong password!"
          
  /register:
    post:
      summary: "User registration"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegistration"
      responses:
        '201':
          description: "User successfully registered"
        '409':
          description: "Account already registered"

  /users/{userId}:  #Get/ update a specific users details/ delete a user
    get:
      summary: "Get details of a user"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        '200':
          description: "Detailed information about a user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    put:
      summary: "Update user details"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "integer"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        '200':
          description: "User successfully updated"
    delete:
      summary: "Delete a user"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        '204':
          description: "User successfully deleted"
          
  /users/{userId}/liked-songs:  #See users liked songs/ Like/unlike song
    get:
      summary: "Get liked songs of a user"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        '200':
          description: "Users liked songs"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Song"
    post:
      summary: "Like a song"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "integer"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Song"
      responses:
        '201':
          description: "Song liked!"
          
    delete:
      summary: "Unlike a song"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "integer"
        - name: "songId"
          in: "query"
          required: true
          schema:
            type: "integer"
      responses:
        '204':
          description: "Song unliked"
          
  /users/{userId}/preferences:
    get:
      summary: "Get user preferences"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        '200':
          description: "User's preferences"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPreferences"

    put:
      summary: "Update user preferences"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "integer"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPreferences"
      responses:
        '200':
          description: "User preferences updated"

  /playlists:
    get:
      summary: "Get a list of playlists"
      responses:
        '200':
          description: "A list of playlists"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Playlist"
    post:
      summary: "Create a new playlist"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Playlist"
      responses:
        '201':
          description: "Playlist successfully created"

  /playlists/{playlistId}:
    get:
      summary: "Get details of a playlist"
      parameters:
        - name: "playlistId"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        '200':
          description: "Detailed information about a playlist"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Playlist"
    put:
      summary: "Update playlist details"
      parameters:
        - name: "playlistId"
          in: "path"
          required: true
          schema:
            type: "integer"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlaylistUpdate"
      responses:
        '200':
          description: "Playlist successfully updated"
    delete:
      summary: "Delete a playlist"
      parameters:
        - name: "playlistId"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        '204':
          description: "Playlist successfully deleted"
  
  /songs/{songId}:
    get:
      summary: "Get details of a song"
      parameters:
        - name: "songId"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        '200':
          description: "Detailed information about a song"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Song"
  
  /playlists/{playlistId}/songs:
    get:
      summary: "Get songs in a playlist"
      parameters:
        - name: "playlistId"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        '200':
          description: "Songs in the playlist"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Song"

    post:
      summary: "Add a song to a playlist"
      parameters:
        - name: "playlistId"
          in: "path"
          required: true
          schema:
            type: "integer"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Song"
      responses:
        '201':
          description: "Song added to the playlist"

    delete:
      summary: "Remove a song from a playlist"
      parameters:
        - name: "playlistId"
          in: "path"
          required: true
          schema:
            type: "integer"
        - name: "songId"
          in: "query"
          required: true
          schema:
            type: "integer"
      responses:
        '204':
          description: "Song removed from the playlist"
        '400':
          description: "Invalid name"
        '404':
          description: "Song not found"

components:
  schemas:
    User:
      type: "object"
      properties:
        id:
          type: "integer"
        username:
          type: "string"
        email:
          type: "string"
    
    UserUpdate:
      type: "object"
      properties:
        username:
          type: "string"
        email:
          type: "string"
          
    UserRegistration:
     type: "object"
     properties:
       username:
         type: "string"
       email:
         type: "string"
       password:
         type: "string"

    Playlist:
      type: "object"
      properties:
        id:
          type: "integer"
        title:
          type: "string"
        description:
          type: "string"

    PlaylistUpdate:
      type: "object"
      properties:
        title:
          type: "string"
        description:
          type: "string"
  
    UserPreferences:
      type: "object"
      properties:
        preferredGenres:
          type: "array"
          items:
            type: "string"
        preferredArtists:
          type: "array"
          items:
            type: "string"
        settings:
          type: "object"
          properties:
            theme:
              type: "string"
              enum:
                - "light"
                - "dark"
            notifications:
              type: "boolean"
  
    Song:
      type: "object"
      properties:
        id:
          type: "integer"
        title:
          type: "string"
        artist:
          type: "string"
        duration:
          type: "string"
        genre:
          type: "string"
        source:
          type: "string"
