openapi: 3.0.0
info:
  title: Music-streaming-api
  description: The API for a music streaming app
  version: 1.0.0
servers:
- url: /
paths:
  /login:
    post:
      summary: User login
      operationId: loginPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login_body'
        required: true
      responses:
        "200":
          description: User successfully logged in
        "401":
          description: Incorrect username or password
      x-swagger-router-controller: Default
  /register:
    post:
      summary: User registration
      operationId: registerPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: User successfully registered
        "409":
          description: User account already exists
      x-swagger-router-controller: Default
  /users/{userId}:
    get:
      summary: Get details of a user
      operationId: usersUserIdGET
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Detailed information about a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: User not found
      x-swagger-router-controller: Default
    put:
      summary: Update user details
      operationId: usersUserIdPUT
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
        required: true
      responses:
        "200":
          description: User details successfully updated
        "403":
          description: Forbidden - User not the owner of the account
      x-swagger-router-controller: Default
    delete:
      summary: Delete a specific user
      operationId: usersUserIdDELETE
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          description: User successfully deleted
        "403":
          description: Forbidden - User not the owner of the account
        "404":
          description: User not found
      x-swagger-router-controller: Default
  /users/{userId}/liked-songs:
    get:
      summary: Get liked songs of a user
      operationId: usersUserIdLiked_songsGET
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Users liked songs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'
                x-content-type: application/json
      x-swagger-router-controller: Default
    post:
      summary: Like a song
      operationId: usersUserIdLiked_songsPOST
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Song'
        required: true
      responses:
        "201":
          description: Song liked!
      x-swagger-router-controller: Default
    delete:
      summary: Unlike a song
      operationId: usersUserIdLiked_songsDELETE
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: songId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "204":
          description: Song unliked
      x-swagger-router-controller: Default
  /users/{userId}/liked-playlists:
    get:
      summary: Get liked playlists of a user
      operationId: usersUserIdLiked_playlistsGET
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Users liked playlists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Playlist'
                x-content-type: application/json
      x-swagger-router-controller: Default
    post:
      summary: Like a playlist
      operationId: usersUserIdLiked_playlistsPOST
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Playlist'
        required: true
      responses:
        "201":
          description: Playlist liked!
      x-swagger-router-controller: Default
    delete:
      summary: Unlike a playlist
      operationId: usersUserIdLiked_playlistsDELETE
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: playlistId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "204":
          description: Playlist unliked
      x-swagger-router-controller: Default
  /users/{userId}/preferences:
    get:
      summary: Get user preferences
      operationId: usersUserIdPreferencesGET
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: User's preferences
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferences'
      x-swagger-router-controller: Default
    put:
      summary: Update user preferences
      operationId: usersUserIdPreferencesPUT
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPreferences'
        required: true
      responses:
        "200":
          description: User preferences updated
      x-swagger-router-controller: Default
  /playlists/new:
    post:
      summary: Create a new playlist
      operationId: playlistsNewPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Playlist'
        required: true
      responses:
        "201":
          description: Playlist successfully created
      x-swagger-router-controller: Default
  /playlists/{playlistId}/songs:
    get:
      summary: Get songs in a playlist
      operationId: playlistsPlaylistIdSongsGET
      parameters:
      - name: playlistId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Songs in the playlist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'
                x-content-type: application/json
        "404":
          description: Song not in playlist
      x-swagger-router-controller: Default
    post:
      summary: Add a song to a playlist
      operationId: playlistsPlaylistIdSongsPOST
      parameters:
      - name: playlistId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Song'
        required: true
      responses:
        "201":
          description: Song added to the playlist
        "403":
          description: Forbidden - User not the owner of the playlist
      x-swagger-router-controller: Default
    delete:
      summary: Remove a song from a playlist
      operationId: playlistsPlaylistIdSongsDELETE
      parameters:
      - name: playlistId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: songId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "204":
          description: Song removed from the playlist
        "400":
          description: Invalid name
        "403":
          description: Forbidden - User not the owner of the playlist
        "404":
          description: Song not on playlist
      x-swagger-router-controller: Default
  /playlists/{playlistId}:
    get:
      summary: Get details of a playlist
      operationId: playlistsPlaylistIdGET
      parameters:
      - name: playlistId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Detailed information about a playlist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
        "404":
          description: Playlist not found
      x-swagger-router-controller: Default
    put:
      summary: Update playlist details
      operationId: playlistsPlaylistIdPUT
      parameters:
      - name: playlistId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaylistUpdate'
        required: true
      responses:
        "200":
          description: Playlist successfully updated
        "403":
          description: Forbidden - User not the owner of the playlist
        "404":
          description: Playlist not found
      x-swagger-router-controller: Default
    delete:
      summary: Delete a playlist
      operationId: playlistsPlaylistIdDELETE
      parameters:
      - name: playlistId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          description: Playlist successfully deleted
        "403":
          description: Forbidden - User not the owner of the playlist
        "404":
          description: Playlist not found
      x-swagger-router-controller: Default
  /songs/{songId}:
    get:
      summary: Get details of a song
      operationId: songsSongIdGET
      parameters:
      - name: songId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Detailed information about a song
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'
        "404":
          description: Song not in the platform
      x-swagger-router-controller: Default
  /search:
    get:
      summary: "Search for songs, artists, and playlists"
      operationId: searchGET
      parameters:
      - name: query
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: type
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - songs
          - artists
          - playlists
      responses:
        "200":
          description: List of items matching the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "404":
          description: No items found for the query
      x-swagger-router-controller: Default
  /artists/{artistId}/songs:
    get:
      summary: Get songs by a specific artist
      operationId: artistsArtistIdSongsGET
      parameters:
      - name: artistId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: List of songs by the specified artist
        "404":
          description: Artist or songs not found
      x-swagger-router-controller: Default
  /songs/genres/{genre}:
    get:
      summary: Get songs by genre
      operationId: songsGenresGenreGET
      parameters:
      - name: genre
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: List of songs in the specified genre
        "404":
          description: No songs found for the specified genre
      x-swagger-router-controller: Default
  /artists/{artistId}:
    get:
      summary: Get details of an artist
      operationId: artistsArtistIdGET
      parameters:
      - name: artistId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Details about the artist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        "404":
          description: Artist not found
      x-swagger-router-controller: Default
    put:
      summary: Update artist details
      operationId: artistsArtistIdPUT
      parameters:
      - name: artistId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArtistUpdate'
        required: true
      responses:
        "200":
          description: Artist details successfully updated
        "403":
          description: Forbidden - User not the owner of the artist profile
        "404":
          description: Artist not found
      x-swagger-router-controller: Default
  /artists:
    get:
      summary: Get a list of the artists on the platform
      operationId: artistsGET
      responses:
        "200":
          description: A list of artists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
                x-content-type: application/json
      x-swagger-router-controller: Default
    post:
      summary: Create a new artist
      operationId: artistsPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artist'
        required: true
      responses:
        "201":
          description: Artist created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        "400":
          description: "Bad request, invalid input"
      x-swagger-router-controller: Default
  /artists/{artistId}/albums:
    get:
      summary: Get albums of a specific artist
      operationId: artistsArtistIdAlbumsGET
      parameters:
      - name: artistId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Albums of the specified artist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Playlist'
                x-content-type: application/json
        "404":
          description: Artist not found or no albums available
      x-swagger-router-controller: Default
  /artist/{artistId}/following:
    post:
      summary: Follow an artist
      operationId: artistArtistIdFollowingPOST
      parameters:
      - name: artistId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: userId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: User started following the artist
        "400":
          description: Bad request
        "404":
          description: Artist not found
      x-swagger-router-controller: Default
    delete:
      summary: Unfollow an artist
      operationId: artistArtistIdFollowingDELETE
      parameters:
      - name: artistId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: userId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "204":
          description: User unfollowed the artist
        "400":
          description: Bad request
        "404":
          description: Artist not found
      x-swagger-router-controller: Default
  /artists/{artistId}/songs/upload:
    post:
      summary: Upload a song as an artist
      operationId: artistsArtistIdSongsUploadPOST
      parameters:
      - name: artistId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Song'
        required: true
      responses:
        "201":
          description: Song successfully uploaded
        "400":
          description: Bad request
      x-swagger-router-controller: Default
  /artists/{artistId}/albums/upload:
    post:
      summary: Create and upload an album (playlist) as an artist
      operationId: artistsArtistIdAlbumsUploadPOST
      parameters:
      - name: artistId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Playlist'
        required: true
      responses:
        "201":
          description: Album (playlist) successfully created and uploaded by the artist
        "400":
          description: Bad request
      x-swagger-router-controller: Default
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
      example:
        id: 0
        email: email
        username: username
    UserUpdate:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
    Playlist:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
      example:
        description: description
        id: 0
        title: title
    PlaylistUpdate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
    UserPreferences:
      type: object
      properties:
        preferredGenres:
          type: array
          items:
            type: string
        preferredArtists:
          type: array
          items:
            type: string
        settings:
          $ref: '#/components/schemas/UserPreferences_settings'
        likedPlaylists:
          type: array
          items:
            type: integer
      example:
        settings:
          theme: light
          notifications: true
        likedPlaylists:
        - 0
        - 0
        preferredGenres:
        - preferredGenres
        - preferredGenres
        preferredArtists:
        - preferredArtists
        - preferredArtists
    Song:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        artist:
          type: string
        duration:
          type: string
        genre:
          type: string
        source:
          type: string
      example:
        duration: duration
        artist: artist
        genre: genre
        id: 0
        source: source
        title: title
    Artist:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        genre:
          type: string
        albums:
          type: array
          items:
            $ref: '#/components/schemas/Playlist'
        bio:
          type: string
        socialMedia:
          $ref: '#/components/schemas/Artist_socialMedia'
        followers:
          type: array
          items:
            type: integer
        songs:
          type: array
          items:
            $ref: '#/components/schemas/Song'
      example:
        albums:
        - description: description
          id: 0
          title: title
        - description: description
          id: 0
          title: title
        followers:
        - 6
        - 6
        songs:
        - duration: duration
          artist: artist
          genre: genre
          id: 0
          source: source
          title: title
        - duration: duration
          artist: artist
          genre: genre
          id: 0
          source: source
          title: title
        name: name
        genre: genre
        bio: bio
        id: 0
        socialMedia:
          twitter: twitter
          website: website
          facebook: facebook
          instagram: instagram
    ArtistUpdate:
      type: object
      properties:
        name:
          type: string
        genre:
          type: string
        bio:
          type: string
        socialMedia:
          $ref: '#/components/schemas/Artist_socialMedia'
    login_body:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    inline_response_200:
      oneOf:
      - $ref: '#/components/schemas/Song'
      - $ref: '#/components/schemas/Artist'
      - $ref: '#/components/schemas/Playlist'
    UserPreferences_settings:
      type: object
      properties:
        theme:
          type: string
          enum:
          - light
          - dark
        notifications:
          type: boolean
      example:
        theme: light
        notifications: true
    Artist_socialMedia:
      type: object
      properties:
        twitter:
          type: string
        facebook:
          type: string
        instagram:
          type: string
        website:
          type: string
      example:
        twitter: twitter
        website: website
        facebook: facebook
        instagram: instagram
